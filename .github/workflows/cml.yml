name: CML CI/CD Pipeline
on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: aiapps-460407
          export_default_credentials: true
      
      # Debug authentication
      - name: Debug Authentication
        run: |
          echo "=== Checking if service account key exists ==="
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "ERROR: GCP_SA_KEY secret is empty or not set"
            exit 1
          else
            echo "GCP_SA_KEY secret exists and has content"
          fi
          
          echo "=== Checking service account activation ==="
          gcloud auth list --format="table(account,status)"
          
          echo "=== Checking project configuration ==="
          gcloud config list project
          
          echo "=== Trying to activate service account explicitly ==="
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project aiapps-460407
          rm /tmp/gcp-key.json
      
      # Configure Docker for Artifact Registry
      - name: Configure Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      # Install GKE auth plugin
      - name: Install GKE Auth Plugin
        run: |
          echo "=== Installing gke-gcloud-auth-plugin ==="
          gcloud components install gke-gcloud-auth-plugin --quiet
          echo "=== Setting up kubectl authentication ==="
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
      
      # Verify authentication and permissions
      - name: Verify Setup
        run: |
          echo "=== Verifying GCP Authentication (After Fix) ==="
          gcloud auth list
          echo "=== Verifying Project ==="
          gcloud config get-value project
          echo "=== Verifying Artifact Registry Access ==="
          gcloud artifacts repositories list --location=us-central1 || echo "Artifact Registry access failed"
          echo "=== Verifying GKE Access ==="
          gcloud container clusters list --zone=us-central1 || echo "GKE access failed"
      
      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t "us-central1-docker.pkg.dev/aiapps-460407/my-repo/iris-api:${{ github.sha }}" .
        
      # Push to Artifact Registry
      - name: Push to Registry
        run: |
          docker push "us-central1-docker.pkg.dev/aiapps-460407/my-repo/iris-api:${{ github.sha }}"
      
      - name: Deploy to GKE
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          gcloud container clusters get-credentials iris-cluster --zone us-central1 --project aiapps-460407
          kubectl set image deployment/iris-deployment iris-api="us-central1-docker.pkg.dev/aiapps-460407/my-repo/iris-api:${{ github.sha }}"
          kubectl rollout restart deployment/iris-deployment
          kubectl rollout status deployment/iris-deployment --timeout=300s

      - name: Create CML Report
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          echo "## 🚀 ML Model Deployment Report" > report.md
          echo "**Project**: Iris Classification API" >> report.md
          echo "**Commit**: ${{ github.sha }}" >> report.md
          echo "**Image**: us-central1-docker.pkg.dev/aiapps-460407/my-repo/iris-api:${{ github.sha }}" >> report.md
          echo "**Status**: ✅ Deployed Successfully" >> report.md
          echo "" >> report.md
          echo "### 📊 Deployment Details" >> report.md
          kubectl get deployments iris-deployment -o wide >> report.md
          echo "" >> report.md
          echo "### 🌐 Service Information" >> report.md
          kubectl get service iris-service -o wide >> report.md
          echo "" >> report.md

          EXTERNAL_IP=$(kubectl get service iris-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
            echo "### 🧪 API Testing" >> report.md
            echo "**Endpoint**: http://$EXTERNAL_IP" >> report.md
            echo "**Test Command**:" >> report.md
            echo '```' >> report.md
            echo "curl -X POST \"http://$EXTERNAL_IP/predict/\" \\" >> report.md
            echo '  -H "Content-Type: application/json" \' >> report.md
            echo '  -d '\''{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}'\'' ' >> report.md
            echo '```' >> report.md
          fi
          cml comment create report.md
